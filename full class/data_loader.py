import numpy as np
from tensorflow import keras

class DataLoader:
    """
    کلاس DataLoader مسئول بارگذاری داده‌ها، اضافه کردن ویژگی‌های جدید و نرمال‌سازی داده‌ها است.
    
    این کلاس مراحل پیش‌پردازش داده‌ها را قبل از آموزش مدل فراهم می‌کند. شامل متدهایی برای:
    - بارگذاری دیتاست California Housing
    - اضافه کردن ویژگی‌های اضافی به داده‌ها برای بهبود مدل
    - نرمال‌سازی داده‌ها با استفاده از میانگین و انحراف معیار مجموعه داده‌های آموزشی
    """

    def __init__(self):
        """
        مقداردهی اولیه کلاس DataLoader.
        
        ویژگی‌ها:
        - mean: میانگین داده‌ها برای هر ویژگی (محاسبه شده در هنگام نرمال‌سازی داده‌های آموزشی)
        - std: انحراف معیار داده‌ها برای هر ویژگی (محاسبه شده در هنگام نرمال‌سازی داده‌های آموزشی)
        """
        self.mean = None  # میانگین داده‌های آموزشی برای نرمال‌سازی
        self.std = None   # انحراف معیار داده‌های آموزشی برای نرمال‌سازی
    
    def load_data(self):
        """
        بارگذاری داده‌ها از دیتاست California Housing.
        
        این متد از کتابخانه Keras برای بارگذاری داده‌های مجموعه California Housing استفاده می‌کند و آن‌ها را به دو بخش آموزشی و اعتبارسنجی تقسیم می‌کند.

        خروجی:
        - (x_train, y_train): مجموعه داده‌های آموزشی و برچسب‌ها
        - (x_validate, y_validate): مجموعه داده‌های اعتبارسنجی و برچسب‌ها
        """
        return keras.datasets.california_housing.load_data()

    def add_features(self, x):
        """
        افزودن ویژگی‌های اضافی به داده‌ها.

        این متد سه ویژگی اضافی را به داده‌ها اضافه می‌کند:
        - تراکم جمعیت: نسبت جمعیت به تعداد خانوارها
        - تعداد اتاق‌ها به ازای هر نفر: نسبت تعداد کل اتاق‌ها به جمعیت
        - نسبت اتاق‌های خواب به کل اتاق‌ها: نسبت تعداد اتاق‌های خواب به کل اتاق‌ها
        
        ورودی:
        - x: داده‌های اصلی (آرایه Numpy)

        خروجی:
        - داده‌های اصلی به همراه ویژگی‌های جدید اضافه شده (آرایه Numpy)
        """
        density = x[:, 5] / x[:, 4]  # جمعیت / تعداد خانوارها
        rooms_per_person = x[:, 3] / x[:, 5]  # تعداد کل اتاق‌ها / جمعیت
        bedrooms_to_rooms_ratio = x[:, 2] / x[:, 3]  # تعداد اتاق خواب‌ها / تعداد کل اتاق‌ها

        # اضافه کردن ویژگی‌های جدید به داده‌ها
        return np.hstack([x, density[:, np.newaxis], rooms_per_person[:, np.newaxis], bedrooms_to_rooms_ratio[:, np.newaxis]])

    def normalize_data(self, x, training=True):
        """
        نرمال‌سازی داده‌ها با استفاده از میانگین و انحراف معیار.

        این متد داده‌ها را با استفاده از میانگین و انحراف معیار نرمال‌سازی می‌کند. اگر داده‌های آموزشی باشد، میانگین و انحراف معیار محاسبه و ذخیره می‌شوند، در غیر این صورت از مقادیر محاسبه‌شده استفاده می‌کند.

        ورودی:
        - x: داده‌هایی که باید نرمال‌سازی شوند (آرایه Numpy)
        - training: اگر True باشد، داده‌ها را به عنوان داده‌های آموزشی در نظر می‌گیرد و میانگین و انحراف معیار را محاسبه می‌کند.

        خروجی:
        - داده‌های نرمال‌سازی شده (آرایه Numpy)
        """
        if training:
            self.mean = x.mean(axis=0)
            self.std = x.std(axis=0)
        
        # اعمال نرمال‌سازی با استفاده از میانگین و انحراف معیار ذخیره شده
        return (x - self.mean) / self.std
